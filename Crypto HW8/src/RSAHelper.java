import java.math.BigInteger;

public class RSAHelper {

	// my public key n and e
	public static BigInteger nVince;
	public static BigInteger eVince;
	static {
		eVince = new BigInteger("65535");
		nVince = new BigInteger("580504860905730127328793936193393139793793221339018682588487364738619763870876330182772272487103569721428494555682763058509862879841851816230424252352069524024037703737302599689984880723307196370394301691117089745124717326297148347645981311587405880771569923355469945130932766283107858337754427928355314261897712296990350525032830250746784757692285995433504029088679536541006425194628401656533369023462597315734810038964219998681978676080511386309063319434490825273772512963659443062822616762425684181523802925177653774210381330605800843977271536505575941313825134710287927608418803608462696623343776064709515071727870529945036698806407672648317273204174443814848808337094871638664590701303381936614932473362267210960347962876422741634617072327603216604883184742542222789813013462029431653572837747359556853618640110659512607221675493031250922167242857336207093956399854422988109485939015116443945291384732376177122013624141237717950111154500437034416780340195099458108471437017459787470023995044064207412032910981207926215878568094036146154508487949388206955823466562797487846967506266376830473968664456567191171379688564823255669237860139948728758194855581342201927297036140602633811247634169892873264439451267557484155518334646391");
		}
	
	// 5 signed messages.  Only 1 of them is signed with my
	// private key.  Figure out which one it is and recover the
	// plaintext.  It will be a question related to RSA.
	// Answer that question, encrypt with your private key to
	// sign the message, and then encrypt that result with my
	// public key so that only I can decrypt your answer.
	public static BigInteger C1;
	public static BigInteger C2;
	public static BigInteger C3;
	public static BigInteger C4;
	public static BigInteger C5;
	static {
		C1 = new BigInteger("535969135017417546330652711062458698434236457335228447397113579485430569356280580521327732195567300872601303910640456416496208133241740899667766497748686222881110836995231284279569829826160871670574318592731340239299373196823914791432307513060390999923448757263093749521787853535743539593510847860338124474528903567739065691952904212383668266311738485649937231175136243153327432168220517179486241050204816738825833987773103727167414297728694420705757660323810512843766788276110178305039944574591751624998503554157530610128010813833531304131442920240595391853188964524321638995026413653504630508479831516395572924653947069663188099088779270843277087341731495805558348975430918268432812097069338037082620464346545461338921245990548071648668676873636014985541965598931204699362670333889071102836336447601229104985992266366124934878724008865460464351406727030985746064246147507311180260715839269180516654657433707693740371891841537182576261644861766027301113290233612356775126831826124458719776122163695677406467790398207662105346254342273234235479629389803340375672209454477445566940031897406988318547720071403832956642332067964233556534057044876476459481512427745702174528858178550373456860663352658110404466446327093802438542544530005");
		C2 = new BigInteger("39980374548144734834899006827699469702599420969079022250513418571400049953783806154816839472960697780271399081879115748389147941705954947472286552606749473035529077460255305893687335713271099420530696870674954263589629261705270819767519289902104092121341552163204561989482626122118711141305389777718850140428320688395746400497926846381755518565904696986063591011553157495983625003344298163496211621909300883719846982776008964501082662193407137482100001331653362591593864893754833997742005462873047827284647574525210106213561994104960800539198667345002972726196979010192530115048908755830142042111408407609888713481355659975220343190216654453880134086477814743507109170034849193773446222202202360128450259099089294302445481544996837536882317555710322444278677589385419675820751432172800580349157837602131619681495417357147098829404389935561545195782707681787045441106947814065152480569367886617714186438653577043312464737731493057285015417754768579614017736549598379408632678447061339445499484001318992876235595556014329337682196122378868437348817866877899097288253544718102314988181080279896992957045867674164931235915558810979556293503208258724873565910047692932209326789870406739476957408317904898776837309149174345273642673775008");
		C3 = new BigInteger("1035620698755934336427864660826109971241313096827816782521694053354594150712039510390374388614961785043287284970201560429319861468344020236204216854141497397984052365212399063886335136191309306234299803922544791813323426492531924436328816260004046925578444184956066403530354776625303342410396292209031305152520415994962909906297182659193404273256435992775287726274219932122777080708766267419454719673536342985648342429577158570420840278248941350024827338716073139756962934620344681988752538517459361537642466980667908865879716067344733382770394532902756495413252410455240824703764866795909997477241699297135545902785996263515053832736888993888675061564489572308144354915905528838534871400362021881476364548109929093435309513417500515572436064141114956597901156037897095471701818978825825909423685355417575545424705047698348786204121672629349123590101888860639162666566527345861538245403850304488269366386645183239183989400439951169943900571677714430021284906736703616239643435572332126464028382110813394720321148905048362828313152695022269597346531760651411422660330004931453874749360507611802203878032868446658684135107659742766929414569263095812568252014377742016141619959754446472788008463371311019154257072536262669416421876080417");
		C4 = new BigInteger("528744121286194415566314459149563657094714711572680010556606195975260448571050426761859689923874699287603414692903273878257337927287972621803131827112819992467702311224309984858781823511200137690386477058054542970870826166085044487559323665713819298721224735950707817327545058262879075376325519916334953529488739569510156263309703075084990451053933073921851328171332235303257768616340225950546258582686194501016902450737173329675774728127143192736784686303996806218689454853733800845908568157695621669410139484165003148978585589791793135321343667598716078800603099196306764107565943398781791331759184611113078829835834677162368089806889963049133586521666309204206019045206238824659053881917410114848969735699179070093957913840680289041355161160685696143257750703707655036806822576393875483608195238452648021126435874298774086120263113110449153108640026910464778610244791414474376485134781945584785653140583248641595388601020675314618496539864558435368255134691406367621458715741266725308079341069508765337331576468670049220474469935444314249280231329058355176309675845407826960722511115978878161422302252029242267836287538816237708291304029479661784312031228102056646980841529163864745056833755188266911277966371456104390829161743198");
		C5 = new BigInteger("1383219809205808747707161691254597578685452048578722194522485547283532498407611400086715290106467272917327274506025692179928500710719849272929595351240956604509709049916649751024948243679176136017418030325476129243467696277363564896732788698275417155383993652500982160475778429227079566275443221246868410991721569017225478543821008088734253532829883123026316234609024426559286547815951876848342240877378109972443700732808550795666512184195131824429916317257680976376914032814734985817719313298844362390319440597473231287973839506238489221958529149626488369222791409818331697657075280647789554847241274600815557779988587115162460836177971435825145860717762992465696494275903831809601870330621141443603076693302491751162227135485346064419150909471774797711654138842366165266794876543656235589314418364967697103982564642118795815844249344628761332431628967770545539482698830766394791590605817081799432790636441269246837556909820474913160406715634642212296291107929969953948877363648642900344649231426163858224800932344440611414198913662018116667460536980913078566243318749213487154757775673370611592971062915327570149998677495328517908988287700014078338424995179019014725861034572965625041555427087772551206633489494864912555298888726420");
		}
	
	
	/**
	 * This method will take a plaintext message and convert it to
	 * a BigInteger.  This is simply encoding your message as a String
	 * and not otherwise doing any encryption.
	 * @param plaintext The plaintext message
	 * @return a BigInteger encoding of the plaintext
	 */
	public static BigInteger encodeMessageAsBigInteger(String plaintext) {
		return new BigInteger(plaintext.getBytes());
	}
	
	/**
	 * This message will recover the String of the plaintext from
	 * its BigInteger encoding.
	 * @param plaintext BigInteger encoding of plaintext of message.
	 * @return its String equivalent
	 */
	public static String recoverTextFromBigInteger(BigInteger plaintext) {
		return new String(plaintext.toByteArray());
	}
	
}
